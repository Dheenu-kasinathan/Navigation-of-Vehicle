/*
RT Embedded Challenge

Hareesh Venkatachalapathy N15717537
Dheenu Kasinathan         N10498050
Shefali Patel             N12114109
Zhengze Zhu               N16506743

*/

#include "arduinoFFT.h"

arduinoFFT FFT = arduinoFFT(); /* Create FFT object */
/*
These values can be changed in order to evaluate the functions
*/
#define CHANNEL A0
const uint16_t samples = 256;               //This value MUST ALWAYS be a power of 2
const double samplingFrequency = 20000;     //Hz, must be less than 10000 due to ADC

unsigned int sampling_period_us;
unsigned long microseconds;

int pos;
/*
These are the input and output vectors
Input vectors receive computed results from FFT
*/
double vReal[samples];
double vImag[samples];
double mag[10];

int walk=1;
int count[10]={0};

#define SCL_INDEX 0x00
#define SCL_TIME 0x01
#define SCL_FREQUENCY 0x02
#define SCL_PLOT 0x03

#define PWM_LEFT_PIN 4
#define PWM_RIGHT_PIN 5

int trigPin = 9;
int echoPin = 10;

int led = 23;

int freq_val[10] = {5000, 5500, 6000, 6500, 7000, 7500, 8000, 8500, 9000, 9500};
int i = 1;

void setup()
{
  sampling_period_us = round(1000000*(1.0/samplingFrequency));  //for FFT
  Serial.begin(115200);                                         //for FFT
  Serial.println("Ready");                                      //for FFT

  Serial.begin(115200);                                                   //for motor control
  pinMode(PWM_LEFT_PIN, OUTPUT);                                          //for motor control
  pinMode(PWM_RIGHT_PIN, OUTPUT);                                         //for motor control
  analogWriteFrequency(PWM_LEFT_PIN, 50);  // (pin, frequency in Hz)      //for motor control
  analogWriteFrequency(PWM_RIGHT_PIN, 50);  // (pin, frequency in Hz)     //for motor control
  analogWriteResolution(16);          // (# of bits)                      //for motor control
  analogWrite(PWM_LEFT_PIN, 5210);          // (pin, 0 .. 2^(# of bits))  //for motor control
  analogWrite(PWM_RIGHT_PIN, 5210);          // (pin, 0 .. 2^(# of bits)) //for motor control
  //Serial.println("Setup");                                              //for motor control

  pinMode(trigPin, OUTPUT);   //obstacle avoidance
  pinMode(echoPin, INPUT);    //obstacle avoidance

  pinMode(led, OUTPUT);       //LED after final beacon
  
}

void loop()
{ 
  int ini_freq = 5000;              //initial frequency
  int loc_freq;                     //frequency to be located
  int beac_var;
  loc_freq = ini_freq;
  Serial.println("Loc-freq:");
  Serial.println(loc_freq);
  while(1)
  {
    if (loc_freq == 10000)
    {  
      digitalWrite(led, HIGH);
      delay(1000);
      stopFinal();
      break; 
    }
    beac_var = find_freq(loc_freq);
    Serial.println("beac_var:");
    Serial.println(beac_var);
    if (beac_var == 1)  //beacon has been reached
      loc_freq += 500;
  }
}

int find_freq(int cur_freq)
{
  /*
   *assign the frequency a number, starting 
   *with 5000 equal to 0, 5500 equals 1, and
   *so on and so forth.
   */
  pos = (cur_freq - 5000)/500;            //makes sure that the actual frequency is converted 
                                          //into a number that is more easily accessible via the mag array
 //Serial.println(pos);
  
  /*SAMPLING*/
  for(int i = 0; i < samples; i++)
  {
      microseconds = micros();    
      
      vReal[i] = analogRead(CHANNEL);
      vImag[i] = 0;
      while(micros() < (microseconds + sampling_period_us))
      {
        //empty loop
      }
  }
  /* Print the results of the sampling according to time */
  FFT.Windowing(vReal, samples, FFT_WIN_TYP_HAMMING, FFT_FORWARD);    /* Weigh data */
  FFT.Compute(vReal, vImag, samples, FFT_FORWARD);                    /* Compute FFT */
  FFT.ComplexToMagnitude(vReal, vImag, samples);                      /* Compute magnitudes */
  Serial.println("Computed magnitudes:");
  PrintVector(vReal, (samples >> 1), SCL_FREQUENCY);
  Serial.println("  ");
  double x = FFT.MajorPeak(vReal, samples, samplingFrequency);
  //Serial.println(x, 6); //Print out what frequency is the most dominant.
  //delay(250);
  
  /*MAGNITUDE ARRAY*/
  /*array value corresponds to                this frequency*/
  mag[0] = vReal[64];                       //5.0 KHz
  mag[1] = (vReal[70] + vReal[71])/2;       //5.5 KHz
  mag[2] = (vReal[76] + vReal[77])/2;       //6.0 KHz
  mag[3] = (vReal[83] + vReal[84])/2;       //6.5 KHz
  mag[4] = (vReal[89] + vReal[90])/2;       //7.0 KHz
  mag[5] = vReal[96];                       //7.5 KHz
  mag[6] = (vReal[102] + vReal[103])/2;     //8.0 KHz
  mag[7] = (vReal[108] + vReal[109])/2;     //8.5 KHz
  mag[8] = (vReal[115] + vReal[116])/2;     //9.0 KHz
  mag[9] = (vReal[121] + vReal[122])/2;     //9.5 KHz
  
  int maxpos = 0;                 //assume the first element is maximum
  for(int i = 0; i < 10; i++)
  {
    if(mag[i] > mag[maxpos])      //compare the current element with the known max
      maxpos = i;                 //update maxpos
  }

  for (i = 0; i < 10; i++)
  {
    if(mag[i]>200)
    {
      count[i]+=1;
    }
  }
  for (i = 0 ;i < 10; i++)
  {
    if (count[i]>5)
    walk=1;
  }
  
  Serial.println("After for loop value of maxpos: ");
  Serial.println(maxpos);
  Serial.println(pos);
  
  int bea = beacon_reached(maxpos, pos);
  //basically, the code below lets the main loop function know that the beacon
  //has been reached and to now increase the value of frequency by 500
  //if the return value is 1, then the beaacon has reached. increase frequency
  //and then repeat the process. if 0, then dont inc freq and repeat process
  
  if (bea == 0 && walk == 1)
  {
    //no obstacle but not in the right direction
    turnLeft();
    Serial.println("no obstacle but not in the right direction");
    return 0;
  }
  if (bea == 1 && walk == 1)
  {
    //no obstacle but in the right direction
    goForward();
    Serial.println("no obstacle but in the right direction");
    return 0;
  }
  if (bea == 2 && walk == 1)
  {
    //obstacle and not in the right direction
    goBack();
    Serial.println("obstacle and not in the right direction");
    return 0;
  }
  if (bea == 3 && walk == 1)
  {
    //obstacle and the right direction
    goBack();
    Serial.println("obstacle and the right direction");
    walk = 0;
    return 1;       
  }
  
}

int beacon_reached(int maxpos, int pos)
{
  //if last condition then the beacon has been reached
  int obst = is_obstacle();             //0 for no obstacle, 1 for obstacle
  if (obst == 0 && maxpos != pos)       //no obstacle but not in the right direction
    return 0;
  else if (obst == 0 && maxpos == pos)  //no obstacle but in the right direction
    return 1;
  else if (obst == 1 && maxpos != pos)  //obstacle and not in the right direction
    return 2;
  else if (obst == 1 && maxpos == pos)  //obstacle and the right direction
    return 3;
}

int is_obstacle()
{
  long duration, distance;            //obstacle avoidance
  digitalWrite(trigPin,HIGH);         //obstacle avoidance
  delayMicroseconds(1000);            //obstacle avoidance
  digitalWrite(trigPin, LOW);         //obstacle avoidance
  duration = pulseIn(echoPin, HIGH);  //obstacle avoidance
  distance = (duration/2)/29.1;       //obstacle avoidance
  Serial.print(distance);             //obstacle avoidance
  Serial.println("CM");               //obstacle avoidance
  delay(10);                          //obstacle avoidance 
  
  if (distance > 20)
    return 0;                         //meaning there is no obstacle, hence 0
  else
    return 1;                         //meaning there is an obstacle, hence 1
}

void goForward()
{
  analogWrite(PWM_LEFT_PIN, 5600);           
  analogWrite(PWM_RIGHT_PIN, 4075);         
  delay(800);
}

void goBack()
{
  analogWrite(PWM_LEFT_PIN, 4075);           
  analogWrite(PWM_RIGHT_PIN, 5600);          
  delay(300);
}

void stopCart() 
{
  analogWrite(PWM_LEFT_PIN, 5000);           
  analogWrite(PWM_RIGHT_PIN, 5000);           
  delay(1000);
}


void turnLeft()
{
  analogWrite(PWM_LEFT_PIN, 5600);          
  analogWrite(PWM_RIGHT_PIN, 5600);  
  delay(200);  
  stopCart();  
}

void turnRight()
{
  analogWrite(PWM_LEFT_PIN, 4075);          
  analogWrite(PWM_RIGHT_PIN, 4075);  
  delay(500);
  stopCart();
}

void stopFinal() 
{
  analogWrite(PWM_LEFT_PIN, 5000);            
  analogWrite(PWM_RIGHT_PIN, 5000);           
  delay(10000);
}

void PrintVector(double *vData, uint16_t bufferSize, uint8_t scaleType)
{
  for (uint16_t i = 0; i < bufferSize; i++)
  {
    double abscissa;
    /* Print abscissa value */
    switch (scaleType)
    {
      case SCL_INDEX:
        abscissa = (i * 1.0);
        break;
      case SCL_TIME:
        abscissa = ((i * 1.0) / samplingFrequency);
        break;
      case SCL_FREQUENCY:
        abscissa = ((i * 1.0 * samplingFrequency) / samples);
        break;
    }
    Serial.println(i);
    Serial.print(" ");
    Serial.print(abscissa, 6);
    if(scaleType == SCL_FREQUENCY)
      Serial.print("Hz");
    Serial.print(" ");
    Serial.println(vData[i], 4);
  }
  Serial.println();
}

